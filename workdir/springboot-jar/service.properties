#####################################
##### System Information
#####################################
# Property: system.sudo
# sudo 권한 필요.
# since: 2019-12-05
system.sudo=false

#####################################
##### static information
#####################################
# Property: install.module.directory
install.module.directory=install

# Property: install.module.script
install.module.script=run-install.sh

# Property: inst_service_sh
service.registration.script=install-as-a-service.sh

## Comment
# Property: service.title
# 서비스 설명
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.title=your-service-title

# Property: service_properteis
# 서비스 설정 파일
# since: 2019-11-04
service.properties=${install.dir}/service.properties

#####################################
##### deploy module
##### (deploy.sh)
#####################################

# Property: root.dir
# 설치 최상위 디렉토리
# since: 2019-11-07
# !!! 프로그램에 따라 수정할 것. !!!
root.dir=your-install-root-directory

# Property: group
# 수행프로젝트.
# 이 정보를 기준으로 개발프로젝트 결과물이 동일한 경로에 배포된다. 
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
group=your-group-directory

# Property: group
# 수행프로젝트.
# 개발프로젝트 결과물이 저장되는 경로 
# since: 2019-11-06
group.root.dir=${root.dir}/${group}

# Property: group.bin.dir
# 수행프로젝트 설치 디렉토리
# since: 2019-11-06
group.bin.dir=${group.root.dir}/bin

# Property: group.log.dir
# 수행프로젝트 로그 디렉토리
# since: 2019-11-06
group.log.dir=${group.root.dir}/logs

# Property: build.name
# maven 프로젝트의 POM.xml 에서 build.finalName 의 값과 일치해야 함. 
# ...
# <build>
# 	<finalName>${build.name}</finalName>
# ...
# </build>
# !!! 프로그램에 따라 수정할 것. !!!
build.name=your-application-build-name

# Property: build.file
# 프로젝트 POM.xml 에서 build.finalName 의 값 
# ...
# <build>
# 	<finalName>${build.name}</finalName>
# ...
# </build>
# 프로젝트 /assembly/assembly-package-all.xml 에서 format 정보
# ...
# <formats>
# 	<format>tar.gz</format>
# </formats>
# 파일 확장자는 반드시 tar.gz
build.file=${build.name}.tar.gz

# Property: work_tmp_dir
# 임시 설치용 디렉토리
work_tmp_dir=./tmp/${build.name}

#####################################
##### install module
##### (run-install.sh)
#####################################
# Property: install.module.script.desc
install.module.script.desc=### THIS IS A SCRIPT FOR INSTALL A THIS SERVICE ' ###

# Property: install.dir
# 절대경로로 설정할 것.
# !!! 프로그램에 따라 수정할 것. !!!
install.dir=${group.bin.dir}/${build.name}

# Property: log.dir
# 절대경로로 설정할 것.
# since 2019-11-05
log.dir=${group.log.dir}/${build.name}

# Property: log.configuration.filename
# 로그 파일명. 다른 예) log4j.xml, log4j2.xml, log4j2.properties
# 파일위치: ./config
# since 2019-11-05
# !!! 프로그램에 따라 수정할 것. !!!
log.configuration.filename=log4j2.yml

# Property: log.configuration.properties
# 로그파일에 사용된 프로퍼티. 예)"log.dir" 'build.name' group.log.dir
# since 2019-11-05
# !!! 프로그램에 따라 수정할 것. !!!
log.configuration.properties="log.dir" 'build.name' group.log.dir

# Property: cron.configuration.filename
# cron 설정파일에 사용되는 프로퍼티.
# 파일위치: ./shell/cron
# since 2019-11-11
# !!! 프로그램에 따라 수정할 것. !!!
cron.configuration.filename=crontab.cron

# Property: cron.configuration.properties
# cron 설정파일에 사용되는 프로퍼티. 예)"log.dir" 'service.title' install.dir
# since 2019-11-11
# !!! 프로그램에 따라 수정할 것. !!!
cron.configuration.properties="log.dir" 'service.title' install.dir

# Property: cron.configuration.properties
# 모니터링 script 파일명
# 예) \*: 모든 파일
#    다중 파일:  빈칸으로 구분하며, 파일명에 빈칸은 올 수 없다.    
# since 2019-12-12
# !!! 프로그램에 따라 수정할 것. !!!
monitor.configuration.filename=\*
# Property: cron.configuration.properties
# cron 설정파일에 사용되는 프로퍼티. 예)"log.dir" 'service.title' install.dir
# since 2019-12-12
# !!! 프로그램에 따라 수정할 것. !!!
monitor.configuration.properties=log.dir build.name

# Property: resources.directories
# 복사할 디렉토리명(빈칸으로 구분)
# ./assemble/assembly-package-all.xml 에 정의된 내용을 참고.
# !!! 프로그램에 따라 수정할 것. !!!
resources.directories=config crontab lib

# Property: service.registration
# 서비스로 등록할 지 여부. (N: No, Y: Yes, CASE_SENSITIVE)
# !!! 프로그램에 따라 수정할 것. !!!
service.registration=Y

# Property: service.autostart
# 서비스인 경우 자동 시작할지 여부. (N: No, Y: Yes, CASE_SENSITIVE)
# !!! 프로그램에 따라 수정할 것. !!!
service.autostart=Y

# Property: service.registration.message 
# 서비스 등록용 메시지
service.registration.message=Start to install '${service.title}'

#####################################
##### install as a service module
##### (install-as-a-service.sh)
##### ENABLE IF $service.registration=Y 
#####################################
# Property: service.name
# CentOS7 등록될 서비스명
# 서비스 파일 설치 디렉토리.
# CentOS 6 : /etc/init.d
# CentOS 7 : /usr/lib/systemd/system
# Ubuntu 16: /usr/lib/systemd/system
# Ubuntu 18: /lib/systemd/system 
service.name=${build.name}

# Property: service.file.description
# ...
# [Unit]
# Description: ${service.file.description}
# ...
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.description=${service.title}

# Property: service.file.exec_start
# [Service]
# ExecStart: ${service.file.exec_start}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.exec_start=${install.dir}/start.sh --config ${service.properties}

# Property: service.file.exec_stop
# [Service]
# ExecStop: ${service.file.exec_stop}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.exec_stop=${install.dir}/stop.sh --config ${service.properties}

# Property: service.file.exec_status
# [Service]
# ExecStop: ${service.file.exec_status}
# since: 2019-11-11
# !!! 프로그램에 따라 수정할 것. !!!
service.file.exec_status=${install.dir}/status.sh --config ${service.properties}

### begin: for CentOS7 / Ubuntu 16 or higher
## Unit
# Property: service.file.after
# for CentOS7 / Ubuntu 16 or higher
# ...
# [Unit]
# After: ${service.file.after}
# ...
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.after=networ.target

## Service
# Property: service.file.type

# [Service]
# Type: ${service.file.type}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.type=forking

# Property: service.file.user
# [Service]
# User: ${service.file.user}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.user=your-account

# Property: service.file.group
# [Service]
# Group: ${service.file.group}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.group=your-group

## Install
# Property: service.file.wantedby
# for CentOS7 / Ubuntu 16 or higher
# [Install]
# WantedBy: ${service.file.wantedby}
# since: 2019-11-04
# !!! 프로그램에 따라 수정할 것. !!!
service.file.wantedby=multi-user.target
### end: for CentOS7 / Ubuntu 16 or higher#

###########################################
#####
#####  일반적인 Application 인 경우
#####
##### 제어 shell script
##### (start,sh, stop.sh, status.sh, etc ...)
###########################################
# Property: execution.filename
# 실행 파일명
# !!! 프로그램에 따라 수정할 것. !!!
execution.filename=${build.name}.jar

# Property: application.name
# 실행이름
# since: 2019/10/16
# !!! 프로그램에 따라 수정할 것. !!!
application.name=XXX-APPLICATION

# Property: process.count
# 구동 프로세스 개수.
# spring-cloud MSA 적용하는 경우 서비스 모듈의 구동 프로세스 개수
# since: 2019-09-30
# !!! 프로그램에 따라 수정할 것. !!!
process.count=5

# Property: process.interval
# 구동 프로세스가 여러 개인 경우 구동 간격. (단위: 초)
# spring-cloud MSA 적용하는 경우 서비스 모듈의  프로세스 구동 간격. 
# since: 2019-10-16
# !!! 프로그램에 따라 수정할 것. !!!
process.interval=2

#####################################
##### JDWP
#####################################
# Property: jdwp.port
# 원격 디버깅시 사용하는 포트
jdwp.port=40080

###########################################
#####
##### run-install.sh '.war' 는 생략
#####
##### WAS에서 구동되는 경우 (apache-tomcat 기준) 
#####
###########################################
# Property: war_file
# 배포될 war 파일명.
# assembly-package-all.xml 파일 내용 중 복사되는 war 파일
# files.file.destName 값와 동일. 단, .war 는 제외 
# -----------------  
# <files>
#   <file>
#     <source>${project.build.directory}/${build.finalName}.war</source>
#     <outputDirectory>/war</outputDirectory>
#     <destName>ROOT.war</destName>
#   </file>
# </files>
war_file=ROOT

# Property: apache_tomcat_dir
# tomcat 설치 디렉토리
# ${service.name}.service 설정정보의 ExecStart, ExecStop 에 설정되는 shell 파일들의 상위 경로
# !!! 프로그램에 따라 수정할 것. !!!
apache_tomcat_dir=${group.bin.dir}/apache-tomcat-directory

